import React, { useState, useEffect } from 'react';
import { useQuery } from 'wasp/client/operations';
import { generateSummary, generateReview } from 'wasp/client/operations';
import { Brain, RefreshCw, AlertCircle, Star, MessageSquare } from 'lucide-react';

interface AIContentProps {
  title: string;
  overview: string;
  mediaType: 'movie' | 'tv';
  rating?: number;
  userThoughts?: string;
  type: 'summary' | 'review';
  onRefresh?: () => void;
}

export function AIContent({ 
  title, 
  overview, 
  mediaType, 
  rating, 
  userThoughts, 
  type, 
  onRefresh 
}: AIContentProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [content, setContent] = useState<string>('');
  const [error, setError] = useState<string>('');
  const [showContent, setShowContent] = useState(false);

  // Generate content based on type
  const generateContent = async () => {

    setIsGenerating(true);
    setError('');

    try {
      let result;
      if (type === 'summary') {
        result = await generateSummary({ title, overview, mediaType });
        setContent(result.summary);
      } else {
        if (!rating) {
          setError('Rating is required to generate a review');
          return;
        }
        result = await generateReview({ title, rating, userThoughts });
        setContent(result.review);
      }
      setShowContent(true);
    } catch (err) {
      console.error(`Failed to generate ${type}:`, err);
      setError(`Failed to generate ${type}. Please try again.`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleRefresh = () => {
    setShowContent(false);
    setContent('');
    setError('');
    generateContent();
    onRefresh?.();
  };

  const getIcon = () => {
    switch (type) {
      case 'summary':
        return <MessageSquare className="w-4 h-4" />;
      case 'review':
        return <Star className="w-4 h-4" />;
      default:
        return <Brain className="w-4 h-4" />;
    }
  };

  const getTitle = () => {
    switch (type) {
      case 'summary':
        return 'AI Summary';
      case 'review':
        return 'AI Review';
      default:
        return 'AI Content';
    }
  };

  const getDescription = () => {
    switch (type) {
      case 'summary':
        return 'A concise summary generated by AI';
      case 'review':
        return 'A personalized review based on your rating';
      default:
        return 'AI-generated content';
    }
  };



  return (
    <div className="mt-6">
      <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
        {/* Header */}
        <div className="px-4 py-3 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="text-blue-600">
                {getIcon()}
              </div>
              <div>
                <h3 className="font-medium text-gray-900 dark:text-white">
                  {getTitle()}
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {getDescription()}
                </p>
              </div>
            </div>
            <button
              onClick={handleRefresh}
              disabled={isGenerating}
              className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
              title="Refresh content"
            >
              <RefreshCw className={`w-4 h-4 ${isGenerating ? 'animate-spin' : ''}`} />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-4">
          {!showContent && !isGenerating && !error && (
            <div className="text-center py-4">
              <button
                onClick={generateContent}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors"
              >
                <Brain className="w-4 h-4 mr-2" />
                Generate {type === 'summary' ? 'Summary' : 'Review'}
              </button>
            </div>
          )}

          {isGenerating && (
            <div className="flex items-center space-x-3 py-4">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
              <span className="text-gray-600 dark:text-gray-400">
                Generating {type === 'summary' ? 'summary' : 'review'}...
              </span>
            </div>
          )}

          {error && (
            <div className="flex items-start space-x-3 py-4">
              <AlertCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
              <div>
                <p className="text-red-600 dark:text-red-400 text-sm">{error}</p>
                <button
                  onClick={generateContent}
                  className="mt-2 text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                >
                  Try again
                </button>
              </div>
            </div>
          )}

          {showContent && content && (
            <div className="py-2">
              <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                {content}
              </p>
              <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600">
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  Generated by AI â€¢ Click refresh to generate new content
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// Standalone summary component
export function AISummary({ title, overview, mediaType }: {
  title: string;
  overview: string;
  mediaType: 'movie' | 'tv';
}) {
  return (
    <AIContent
      title={title}
      overview={overview}
      mediaType={mediaType}
      type="summary"
    />
  );
}

// Standalone review component
export function AIReview({ title, rating, userThoughts }: {
  title: string;
  rating: number;
  userThoughts?: string;
}) {
  return (
    <AIContent
      title={title}
      overview=""
      mediaType="movie"
      rating={rating}
      userThoughts={userThoughts}
      type="review"
    />
  );
} 